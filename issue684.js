// To run this code you need to install the following dependencies:
// npm install @google/genai mime
// npm install -D @types/node

import {
  GoogleGenAI,
  HarmBlockThreshold,
  HarmCategory,
} from '@google/genai';

async function main() {
  const ai = new GoogleGenAI({
    apiKey: process.env.GEMINI_API_KEY,
  });
  const config = {
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,  // Block few
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,  // Block few
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,  // Block few
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,  // Block few
      },
    ],
    responseMimeType: 'application/json',
  };
  const model = 'gemini-2.5-flash-preview-05-20';
  const contents = [
    {
      role: 'user',
      parts: [
        {
          inlineData: {
            data: `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`,
            mimeType: `image/jpeg`,
          },
        },
        {
          text: `analyze this image. and provide structured response follow the exact schema format.`,
        },
      ],
    },
  ];

  const response = await ai.models.generateContentStream({
    model,
    config,
    contents,
  });
  let fileIndex = 0;
  for await (const chunk of response) {
    console.log(chunk.text);
  }
}

main();
